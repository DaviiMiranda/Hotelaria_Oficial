{
  "version": 3,
  "sources": ["angular:jit:template:src/app/pages/register/register.html", "angular:jit:style:src/app/pages/register/register.css", "src/app/pages/register/register.ts", "src/app/pages/register/register.spec.ts"],
  "sourcesContent": ["<div class=\"container mt-5\">\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <h2 class=\"text-center\">Guest Registration</h2>\n    </div>\n    <div class=\"card-body\">\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"row\">\n          <div class=\"col-md-6 mb-3\">\n            <label for=\"checkin\" class=\"form-label\">Check-in Date</label>\n            <input type=\"date\" id=\"checkin\" class=\"form-control\" formControlName=\"checkin\">\n          </div>\n          <div class=\"col-md-6 mb-3\">\n            <label for=\"checkout\" class=\"form-label\">Check-out Date</label>\n            <input type=\"date\" id=\"checkout\" class=\"form-control\" formControlName=\"checkout\">\n          </div>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"name\" class=\"form-label\">Name</label>\n          <input type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\">\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6 mb-3\">\n            <label for=\"telephone\" class=\"form-label\">Telephone</label>\n            <input type=\"tel\" id=\"telephone\" class=\"form-control\" formControlName=\"telephone\">\n          </div>\n          <div class=\"col-md-6 mb-3\">\n            <label for=\"email\" class=\"form-label\">Email</label>\n            <input type=\"email\" id=\"email\" class=\"form-control\" formControlName=\"email\">\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6 mb-3\">\n            <label for=\"roomType\" class=\"form-label\">Room Type</label>\n            <select id=\"roomType\" class=\"form-select\" formControlName=\"roomType\">\n              <option value=\"normal\">Normal</option>\n              <option value=\"plus\">Plus</option>\n              <option value=\"max\">Max</option>\n              <option value=\"presidential_suite\">Presidential Suite</option>\n            </select>\n          </div>\n          <div class=\"col-md-6 mb-3\">\n            <label for=\"cpf\" class=\"form-label\">CPF</label>\n            <input type=\"text\" id=\"cpf\" class=\"form-control\" formControlName=\"cpf\" placeholder=\"11 digits\">\n          </div>\n        </div>\n        <div class=\"d-grid\">\n          <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!registerForm.valid\">Register</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n", "/* src/app/pages/register/register.css */\n/*# sourceMappingURL=register.css.map */\n", "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { guestService } from '../../services/guest-service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  imports: [ReactiveFormsModule],\n  templateUrl: './register.html',\n  styleUrl: './register.css'\n})\nexport class Register {\n  registerForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private guestService: guestService, private router: Router) {\n    this.registerForm = this.fb.group({\n      checkin: ['', Validators.required],\n      checkout: ['', Validators.required],\n      name: ['', Validators.required],\n      telephone: ['', Validators.required],\n      roomType: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      cpf: ['', [Validators.required, Validators.pattern(/^\\d{11}$/)]]\n    });\n  }\n\n  onSubmit() {\n    if (this.registerForm.valid) {\n      const guestData = this.registerForm.value;\n      \n       this.guestService.Register(guestData).subscribe({\n        // Callback para SUCESSO\n        next: (response) => {\n          console.log('Hóspede registrado com sucesso!', response);\n          \n          // Ação de sucesso: mostre um alerta e redirecione para outra página\n          alert('Hóspede registrado com sucesso!');\n          this.router.navigate(['/guests']); // Ex: Redireciona para a lista de hóspedes\n        },\n        // Callback para ERRO\n        error: (err) => {\n          console.error('Erro ao registrar hóspede:', err);\n\n          // Ação de erro: mostre um alerta para o usuário\n          alert('Não foi possível registrar o hóspede. Tente novamente.');\n        }\n      });\n\n    } else {\n      // Se o formulário for inválido, mostramos um erro no console\n      console.error('Formulário inválido. Por favor, corrija os campos.');\n      // O ideal aqui seria marcar os campos inválidos em vermelho na tela\n    }\n  }\n}", "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { of, throwError } from 'rxjs';\nimport { Register } from './register';\nimport { guestService } from '../../services/guest-service';\n\ndescribe('Register Component', () => {\n  let component: Register;\n  let fixture: ComponentFixture<Register>;\n  let mockGuestService: any;\n  let mockRouter: any;\n\n  beforeEach(async () => {\n    mockGuestService = jasmine.createSpyObj('guestService', ['Register']);\n    mockRouter = jasmine.createSpyObj('Router', ['navigate']);\n\n    await TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, Register],\n      providers: [\n        FormBuilder,\n        { provide: guestService, useValue: mockGuestService },\n        { provide: Router, useValue: mockRouter }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(Register);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should initialize the form with required fields', () => {\n    expect(component.registerForm).toBeDefined();\n    const formControls = component.registerForm.controls;\n    expect(formControls['checkin']).toBeDefined();\n    expect(formControls['checkout']).toBeDefined();\n    expect(formControls['name']).toBeDefined();\n    expect(formControls['telephone']).toBeDefined();\n    expect(formControls['roomType']).toBeDefined();\n    expect(formControls['email']).toBeDefined();\n    expect(formControls['cpf']).toBeDefined();\n  });\n\n  it('should make the form invalid when empty', () => {\n    expect(component.registerForm.valid).toBeFalsy();\n  });\n\n  it('should make the form valid when all fields are filled correctly', () => {\n    component.registerForm.setValue({\n      checkin: '2024-01-01',\n      checkout: '2024-01-05',\n      name: 'John Doe',\n      telephone: '1234567890',\n      roomType: 'single',\n      email: 'john.doe@example.com',\n      cpf: '12345678901'\n    });\n    expect(component.registerForm.valid).toBeTruthy();\n  });\n\n  it('should have an invalid email field if the email format is wrong', () => {\n    const emailControl = component.registerForm.get('email');\n    emailControl?.setValue('invalid-email');\n    expect(emailControl?.valid).toBeFalsy();\n  });\n\n  it('should have an invalid cpf field if the cpf pattern is wrong', () => {\n    const cpfControl = component.registerForm.get('cpf');\n    cpfControl?.setValue('123');\n    expect(cpfControl?.valid).toBeFalsy();\n  });\n\n  describe('onSubmit', () => {\n    beforeEach(() => {\n        spyOn(window, 'alert');\n    });\n\n    it('should not call guestService.Register if the form is invalid', () => {\n      component.onSubmit();\n      expect(mockGuestService.Register).not.toHaveBeenCalled();\n    });\n\n    it('should call guestService.Register with form data if the form is valid', () => {\n      const guestData = {\n        checkin: '2024-01-01',\n        checkout: '2024-01-05',\n        name: 'John Doe',\n        telephone: '1234567890',\n        roomType: 'single',\n        email: 'john.doe@example.com',\n        cpf: '12345678901'\n      };\n      component.registerForm.setValue(guestData);\n      mockGuestService.Register.and.returnValue(of({}));\n      \n      component.onSubmit();\n\n      expect(mockGuestService.Register).toHaveBeenCalledWith(guestData);\n    });\n\n    it('should show success alert and navigate on successful registration', () => {\n      component.registerForm.setValue({\n        checkin: '2024-01-01',\n        checkout: '2024-01-05',\n        name: 'John Doe',\n        telephone: '1234567890',\n        roomType: 'single',\n        email: 'john.doe@example.com',\n        cpf: '12345678901'\n      });\n      mockGuestService.Register.and.returnValue(of({ success: true }));\n\n      component.onSubmit();\n\n      expect(window.alert).toHaveBeenCalledWith('Hóspede registrado com sucesso!');\n      expect(mockRouter.navigate).toHaveBeenCalledWith(['/guests']);\n    });\n\n    it('should show error alert on failed registration', () => {\n      component.registerForm.setValue({\n        checkin: '2024-01-01',\n        checkout: '2024-01-05',\n        name: 'John Doe',\n        telephone: '1234567890',\n        roomType: 'single',\n        email: 'john.doe@example.com',\n        cpf: '12345678901'\n      });\n      mockGuestService.Register.and.returnValue(throwError(() => new Error('Failed registration')));\n\n      component.onSubmit();\n\n      expect(window.alert).toHaveBeenCalledWith('Não foi possível registrar o hóspede. Tente novamente.');\n    });\n  });\n});"],
  "mappings": "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",
  "names": ["register_default", "init_register", "Register", "guestService", "init_register"]
}
