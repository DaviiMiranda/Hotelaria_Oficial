{
  "version": 3,
  "sources": ["angular:jit:template:src/app/pages/guests/guests.html", "angular:jit:style:src/app/pages/guests/guests.css", "src/app/pages/guests/guests.ts", "src/app/pages/guests/guests.spec.ts"],
  "sourcesContent": ["<div class=\"container mt-5\">\n  <h2>Guest List</h2>\n  <table class=\"table table-striped table-hover\">\n    <thead class=\"table-dark\">\n      <tr>\n        <th>Name</th>\n        <th>CPF</th>\n        <th>Email</th>\n        <th>Phone</th>\n        <th>Date In</th>\n        <th>Date Out</th>\n        <th>Room</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let guest of guests\">\n        <td>{{ guest.name }}</td>\n        <td>{{ guest.cpf }}</td>\n        <td>{{ guest.email }}</td>\n        <td>{{ guest.telephone }}</td>\n        <td>{{ guest.checkInDate }}</td>\n        <td>{{ guest.checkOutDate }}</td>\n        <td>{{ guest.roomNumber }}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n", "/* src/app/pages/guests/guests.css */\n/*# sourceMappingURL=guests.css.map */\n", "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { guestService, Guest } from '../../services/guest-service';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-guests',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './guests.html',\n  styleUrl: './guests.css'\n})\n\nexport class Guests {\n  guests: Guest[] = [];\n\n  constructor(private guestService: guestService) {}\n\n  ngOnInit(): void {\n    this.loadGuests();\n  }\n\n  loadGuests() {\n    this.guestService.getGuests().subscribe((data) => {\n      this.guests = data;\n      console.log(data);\n    });\n  }\n\n  addGuest(newGuest: Guest) {\n    this.guestService.addGuest(newGuest).subscribe(() => {\n      this.loadGuests();\n    });\n  }\n\n  deleteGuest(guestId: number) {\n    this.guestService.deleteGuest(guestId).subscribe(() => {\n      this.loadGuests();\n    });\n  }\n    \n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { of } from 'rxjs'; // Para criar Observables falsos\n\nimport { Guests } from './guests'; // Use o nome da classe 'Guests'\nimport { guestService, Guest } from '../../services/guest-service';\n\n// --- PASSO 1: Criar o \"dublê\" do serviço (Mock Service) ---\n// Usamos jasmine.createSpyObj para criar um objeto com funções \"espiãs\"\nconst mockGuestService = jasmine.createSpyObj('guestService', ['getGuests', 'addGuest', 'deleteGuest']);\n\n// Dados de exemplo para o nosso dublê retornar\nconst mockGuests: Guest[] = [\n  { id: 1, name: 'João Silva', cpf: '11122233344', email: 'joao@email.com', telephone: '85999998888', checkInDate: '2025-10-06', checkOutDate: '2025-10-10', roomNumber: '101' },\n  { id: 2, name: 'Maria Souza', cpf: '55566677788', email: 'maria@email.com', telephone: '85988887777', checkInDate: '2025-11-15', checkOutDate: '2025-11-20', roomNumber: '202' }\n];\n\n\n// --- PASSO 2: Configurar o ambiente de teste ---\ndescribe('GuestsComponent', () => {\n  let component: Guests;\n  let fixture: ComponentFixture<Guests>;\n  // Mantemos uma referência ao nosso serviço dublê\n  let service: jasmine.SpyObj<guestService>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      // O componente Guests não é standalone, então o adicionamos em 'declarations'\n      // Se fosse standalone, o importaríamos no array 'imports'\n      imports: [Guests], \n      providers: [\n        // Dizemos ao Angular para injetar nosso dublê sempre que o componente pedir o guestService\n        { provide: guestService, useValue: mockGuestService }\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(Guests);\n    component = fixture.componentInstance;\n    \n    // Pegamos a instância injetada do nosso dublê\n    service = TestBed.inject(guestService) as jasmine.SpyObj<guestService>;\n\n    // Configuramos o retorno padrão do nosso dublê para o método getGuests\n    service.getGuests.and.returnValue(of(mockGuests));\n  });\n\n  // --- PASSO 3: Escrever os casos de teste ---\n  it('deve ser criado', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('deve carregar a lista de hóspedes ao ser inicializado (ngOnInit)', () => {\n    // Ação: ngOnInit é chamado automaticamente por detectChanges()\n    fixture.detectChanges(); \n\n    // Asserção: Verificamos se o serviço foi chamado\n    expect(service.getGuests).toHaveBeenCalled();\n\n    // Asserção: Verificamos se a propriedade 'guests' do componente foi preenchida com os dados do dublê\n    expect(component.guests.length).toBe(2);\n    expect(component.guests).toEqual(mockGuests);\n  });\n\n  it('deve chamar o serviço para adicionar um novo hóspede e recarregar a lista', () => {\n    // Arrange: Configuramos o dublê para o método addGuest\n    const newGuest: Guest = { id: 3, name: 'Carlos Pereira', checkInDate: '2025-01-05', checkOutDate: \"2025-01-10\", cpf: \"12350218896\", email:\"pepepe@gmail.com\", roomNumber:\"101\", telephone:\"5863211523\" }; // Preencha com dados de exemplo\n    service.addGuest.and.returnValue(of(newGuest)); // Simula uma resposta de sucesso\n\n    // Ação: Chamamos o método do componente\n    component.addGuest(newGuest);\n\n    // Asserção: Verificamos se o método do serviço foi chamado com os dados corretos\n    expect(service.addGuest).toHaveBeenCalledWith(newGuest);\n    \n    // Asserção: Verificamos se a lista de hóspedes foi recarregada após a adição\n    // Ele deve ter sido chamado uma vez em ngOnInit e outra vez após o addGuest\n    expect(service.getGuests).toHaveBeenCalledTimes(2); \n  });\n\n  it('deve chamar o serviço para deletar um hóspede e recarregar a lista', () => {\n    // Arrange: Configuramos o dublê para o método deleteGuest\n    const guestIdToDelete = 1;\n    service.deleteGuest.and.returnValue(of(void 0)); // Simula uma resposta de sucesso sem conteúdo\n\n    // Ação: Chamamos o método do componente\n    component.deleteGuest(guestIdToDelete);\n\n    // Asserção: Verificamos se o método do serviço foi chamado com o ID correto\n    expect(service.deleteGuest).toHaveBeenCalledWith(guestIdToDelete);\n    \n    // Asserção: Verificamos se a lista de hóspedes foi recarregada após a exclusão\n    // Ele deve ter sido chamado uma vez em ngOnInit e outra vez após o deleteGuest\n    expect(service.getGuests).toHaveBeenCalledTimes(2);\n  });\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,eAAA;AAAA;AAAA,IAAAD,kBAAA;AAAA;AAAA;;;ICYa;;;;;;;AAZb;AACA;AACA;AACA;AASO,IAAM,SAAN,MAAME,QAAM;MAGG;MAFpB,SAAkB,CAAA;MAElB,YAAoBC,eAA0B;AAA1B,aAAA,eAAAA;MAA6B;MAEjD,WAAQ;AACN,aAAK,WAAU;MACjB;MAEA,aAAU;AACR,aAAK,aAAa,UAAS,EAAG,UAAU,CAAC,SAAQ;AAC/C,eAAK,SAAS;AACd,kBAAQ,IAAI,IAAI;QAClB,CAAC;MACH;MAEA,SAAS,UAAe;AACtB,aAAK,aAAa,SAAS,QAAQ,EAAE,UAAU,MAAK;AAClD,eAAK,WAAU;QACjB,CAAC;MACH;MAEA,YAAY,SAAe;AACzB,aAAK,aAAa,YAAY,OAAO,EAAE,UAAU,MAAK;AACpD,eAAK,WAAU;QACjB,CAAC;MACH;;;;;AA1BW,aAAM,WAAA;MAPlB,UAAU;QACT,UAAU;QACV,SAAS,CAAC,cAAc,WAAW;QACnC,UAAA;;OAED;OAEY,MAAM;;;;;ACZnB;;;AACA;AAEA,IAAAC;AACA;AAIA,QAAM,mBAAmB,QAAQ,aAAa,gBAAgB,CAAC,aAAa,YAAY,aAAa,CAAC;AAGtG,QAAM,aAAsB;MAC1B,EAAE,IAAI,GAAG,MAAM,iBAAc,KAAK,eAAe,OAAO,kBAAkB,WAAW,eAAe,aAAa,cAAc,cAAc,cAAc,YAAY,MAAK;MAC5K,EAAE,IAAI,GAAG,MAAM,eAAe,KAAK,eAAe,OAAO,mBAAmB,WAAW,eAAe,aAAa,cAAc,cAAc,cAAc,YAAY,MAAK;;AAKhL,aAAS,mBAAmB,MAAK;AAC/B,UAAI;AACJ,UAAI;AAEJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;;;UAGnC,SAAS,CAAC,MAAM;UAChB,WAAW;;YAET,EAAE,SAAS,cAAc,UAAU,iBAAgB;;SAEtD,EACA,kBAAiB;AAElB,kBAAU,QAAQ,gBAAgB,MAAM;AACxC,oBAAY,QAAQ;AAGpB,kBAAU,QAAQ,OAAO,YAAY;AAGrC,gBAAQ,UAAU,IAAI,YAAY,GAAG,UAAU,CAAC;MAClD,EAAC;AAGD,SAAG,mBAAmB,MAAK;AACzB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,uEAAoE,MAAK;AAE1E,gBAAQ,cAAa;AAGrB,eAAO,QAAQ,SAAS,EAAE,iBAAgB;AAG1C,eAAO,UAAU,OAAO,MAAM,EAAE,KAAK,CAAC;AACtC,eAAO,UAAU,MAAM,EAAE,QAAQ,UAAU;MAC7C,CAAC;AAED,SAAG,mFAA6E,MAAK;AAEnF,cAAM,WAAkB,EAAE,IAAI,GAAG,MAAM,kBAAkB,aAAa,cAAc,cAAc,cAAc,KAAK,eAAe,OAAM,oBAAoB,YAAW,OAAO,WAAU,aAAY;AACtM,gBAAQ,SAAS,IAAI,YAAY,GAAG,QAAQ,CAAC;AAG7C,kBAAU,SAAS,QAAQ;AAG3B,eAAO,QAAQ,QAAQ,EAAE,qBAAqB,QAAQ;AAItD,eAAO,QAAQ,SAAS,EAAE,sBAAsB,CAAC;MACnD,CAAC;AAED,SAAG,4EAAsE,MAAK;AAE5E,cAAM,kBAAkB;AACxB,gBAAQ,YAAY,IAAI,YAAY,GAAG,MAAM,CAAC;AAG9C,kBAAU,YAAY,eAAe;AAGrC,eAAO,QAAQ,WAAW,EAAE,qBAAqB,eAAe;AAIhE,eAAO,QAAQ,SAAS,EAAE,sBAAsB,CAAC;MACnD,CAAC;IACH,CAAC;;;",
  "names": ["guests_default", "init_guests", "Guests", "guestService", "init_guests"]
}
