{
  "version": 3,
  "sources": ["angular:jit:template:src/app/pages/rooms/rooms.html", "angular:jit:style:src/app/pages/rooms/rooms.css", "src/app/pages/rooms/rooms.ts", "src/app/pages/rooms/rooms.spec.ts"],
  "sourcesContent": ["<div class=\"container mt-5\">\n  <h2>Room List</h2>\n  <table class=\"table table-striped table-hover\">\n    <thead class=\"table-dark\">\n      <tr>\n        <th>Room Number</th>\n        <th>Type</th>\n        <th>Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let room of Rooms\">\n        <td>{{ room.number }}</td>\n        <td>{{ room.type }}</td>\n        <td>{{ room.available ? 'Available' : 'Unavailable' }}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n", "/* src/app/pages/rooms/rooms.css */\n/*# sourceMappingURL=rooms.css.map */\n", "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Room, RoomService } from '../../services/room-service';\n\n@Component({\n  selector: 'app-rooms',\n  imports: [CommonModule],\n  templateUrl: './rooms.html',\n  styleUrl: './rooms.css'\n})\nexport class Rooms  {\n  Rooms: Room[] = [];\n\n    constructor(private roomService: RoomService) {}\n\n    ngOnInit(): void {\n      this.loadRooms();\n    }\n\n    loadRooms() {\n      this.roomService.getRooms().subscribe((data) => {\n        this.Rooms = data;\n        console.log(data);\n      });\n    }\n\n    addRoom(newRoom: Room) {\n      this.roomService.addRoom(newRoom).subscribe(() => {\n        this.loadRooms();\n      });\n    }\n\n    addGuest(newGuest: Room) {\n      this.roomService.addRoom(newGuest).subscribe(() => {\n        this.loadRooms();\n      });\n    }\n\n    deleteGuest(Id: string) {\n      this.roomService.deleteRoom(Id).subscribe(() => {\n        this.loadRooms();\n      });\n    }\n}", "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { Rooms } from './rooms';\n\ndescribe('Rooms', () => {\n  let component: Rooms;\n  let fixture: ComponentFixture<Rooms>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [Rooms]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(Rooms);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,cAAA;AAAA;AAAA,IAAAD,iBAAA;AAAA;AAAA;;;ICUa;;;;;;;AAVb;AACA;AACA;AAQO,IAAM,QAAN,MAAME,OAAK;MAGM;MAFtB,QAAgB,CAAA;MAEd,YAAoB,aAAwB;AAAxB,aAAA,cAAA;MAA2B;MAE/C,WAAQ;AACN,aAAK,UAAS;MAChB;MAEA,YAAS;AACP,aAAK,YAAY,SAAQ,EAAG,UAAU,CAAC,SAAQ;AAC7C,eAAK,QAAQ;AACb,kBAAQ,IAAI,IAAI;QAClB,CAAC;MACH;MAEA,QAAQ,SAAa;AACnB,aAAK,YAAY,QAAQ,OAAO,EAAE,UAAU,MAAK;AAC/C,eAAK,UAAS;QAChB,CAAC;MACH;MAEA,SAAS,UAAc;AACrB,aAAK,YAAY,QAAQ,QAAQ,EAAE,UAAU,MAAK;AAChD,eAAK,UAAS;QAChB,CAAC;MACH;MAEA,YAAY,IAAU;AACpB,aAAK,YAAY,WAAW,EAAE,EAAE,UAAU,MAAK;AAC7C,eAAK,UAAS;QAChB,CAAC;MACH;;;;;AAhCS,YAAK,WAAA;MANjB,UAAU;QACT,UAAU;QACV,SAAS,CAAC,YAAY;QACtB,UAAA;;OAED;OACY,KAAK;;;;;ACVlB;;;AAEA,IAAAC;AAEA,aAAS,SAAS,MAAK;AACrB,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,KAAK;SAChB,EACA,kBAAiB;AAElB,kBAAU,QAAQ,gBAAgB,KAAK;AACvC,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;IACH,CAAC;;;",
  "names": ["rooms_default", "init_rooms", "Rooms", "init_rooms"]
}
